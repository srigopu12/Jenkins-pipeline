pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-cred'  
        DOCKER_IMAGE_NAME = 'my-java-app'
        DOCKER_TAG = 'latest'
        SONARQUBE_SERVER = 'sonarqube' 
    }

    stages {
        stage('Checkout') {
            steps {
                // https://github.com/srigopu12/Jenkins-pipeline/tree/main/MyJavaApp
                checkout scm
            }
        }

        stage('Build and Analyze with Maven') {
            steps {
                script {
                    // Perform Maven build and SonarQube analysis
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh 'mvn clean verify sonar:sonar'
                    }
                }
            }
        }

        stage('SonarQube Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube analysis to complete and check the quality gate status
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_TAG}")
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        // Login is handled automatically by `docker.withRegistry`
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Tag and push Docker image to Docker Hub
                    docker.image("${DOCKER_IMAGE_NAME}:${DOCKER_TAG}").push("${DOCKER_TAG}")
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Add your deployment steps here, e.g., using Docker Compose or Kubernetes
                    // Example:
                    // sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            // Clean up the workspace after build
            cleanWs()
        }
    }
}
